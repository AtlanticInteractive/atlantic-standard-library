{
	"AssignSignature": {
		"body": "Typer.AssignSignature(${1:Typer.Any}, ${2:function(${3:Value})\nend})",
		"description": "AssignSignature",
		"prefix": ["assignsignature"],
	},

	"PromiseAssignSignature": {
		"body": "Typer.PromiseAssignSignature(${1:Typer.Any}, ${2:function(${3:Value})\nend})",
		"description": "PromiseAssignSignature",
		"prefix": ["promiseassignsignature"],
	},

	"Knit": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Knit = require(ReplicatedStorage.Knit)",
		],

		"description": "Require the Knit module",
		"prefix": ["knit", "boilerplate"],
	},

	"Knit Component": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Knit = require(ReplicatedStorage.Knit)",
			"local Janitor = require(Knit.Util.Janitor)",
			"",
			"local ${0:$TM_FILENAME_BASE} = {}",
			"${0:$TM_FILENAME_BASE}.ClassName = \"${0:$TM_FILENAME_BASE}\"",
			"${0:$TM_FILENAME_BASE}.Tag = \"${0:$TM_FILENAME_BASE}\"",
			"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
			"",
			"function ${0:$TM_FILENAME_BASE}.new(Object: Instance)",
			"\tlocal self = setmetatable({",
			"\t\tJanitor = Janitor.new();",
			"\t}, ${0:$TM_FILENAME_BASE})",
			"",
			"\treturn self",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Initialize()",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Deinitialize()",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Destroy()",
			"\tself.Janitor:Destroy()",
			"\ttable.clear(self)",
			"\tsetmetatable(self, nil)",
			"end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			"",
		],

		"description": "Knit Component template",
		"prefix": ["knitcomponent"],
	},

	"Knit Service": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Knit = require(ReplicatedStorage.Knit)",
			"",
			"local ${0:$TM_FILENAME_BASE} = Knit.CreateService({",
			"\tClient = {};",
			"\tName = \"${0:$TM_FILENAME_BASE}\";",
			"})",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitStart()",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitInit()",
			"end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			"",
		],

		"description": "Knit Service template",
		"prefix": ["knitservice"],
	},

	"Knit Controller": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Knit = require(ReplicatedStorage.Knit)",
			"",
			"local ${0:$TM_FILENAME_BASE} = Knit.CreateController({",
			"\tName = \"${0:$TM_FILENAME_BASE}\";",
			"})",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitStart()",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitInit()",
			"end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			"",
		],

		"description": "Knit Controller template",
		"prefix": ["knitcontroller"],
	},

	// "Roact Component": {
	// 	"body": [
	// 		"local Roact = require(script.Parent.Parent.Vendor.Roact)",
	// 		"",
	// 		"local ${1:ComponentName} = Roact.PureComponent:extend(\"$1\")",
	// 		"",
	// 		"function $1:init()",
	// 		"\tself:setState({",
	// 		"\t\tvalue = true,",
	// 		"\t})",
	// 		"end",
	// 		"",
	// 		"function $1:render()",
	// 		"\treturn Roact.createElement(\"Frame\", {})",
	// 		"end",
	// 		"",
	// 		"return $1",
	// 		"",
	// 	],

	// 	"description": "Creates a new Roact Component",
	// 	"prefix": ["roactcomponent", "component"],
	// },

	// "Roact Hook": {
	// 	"body": [
	// 		"local Hook = require(script.Parent.Parent.Utility.Hook)",
	// 		"local Roact = require(script.Parent.Parent.Vendor.Roact)",
	// 		"",
	// 		"local function ${1:ComponentName}(props, hooks)",
	// 		"\tlocal value, setValue = hooks.useState(true)",
	// 		"",
	// 		"\treturn Roact.createElement(\"Frame\", {})",
	// 		"end",
	// 		"",
	// 		"return Hook($1, {",
	// 		"\tcomponentType = \"PureComponent\",",
	// 		"\tname = \"$1\",",
	// 		"})",
	// 		"",
	// 	],

	// 	"description": "Creates a new Roact Hook component.",
	// 	"prefix": ["roacthook", "hook"],
	// },

	// "Roact Story": {
	// 	"body": [
	// 		"local ${1:ComponentName} = require(script.Parent.Parent.Components.$1)",
	// 		"local Roact = require(script.Parent.Parent.Vendor.Roact)",
	// 		"",
	// 		"Roact.setGlobalConfig({",
	// 		"\telementTracing = true,",
	// 		"\tinternalTypeChecks = false,",
	// 		"\tpropValidation = false,",
	// 		"\ttypeChecks = false,",
	// 		"})",
	// 		"",
	// 		"local function $1Story()",
	// 		"\treturn Roact.createElement(\"Frame\", {",
	// 		"\t\tBackgroundTransparency = 1,",
	// 		"\t\tSize = UDim2.fromScale(1, 1),",
	// 		"\t}, {",
	// 		"\t\t$1 = Roact.createElement($1, {}),",
	// 		"\t})",
	// 		"end",
	// 		"",
	// 		"return function(Target)",
	// 		"\tlocal Tree = Roact.mount(Roact.createElement($1Story, {}), Target, \"$1Story\")",
	// 		"",
	// 		"\treturn function()",
	// 		"\t\tRoact.unmount(Tree)",
	// 		"\tend",
	// 		"end",
	// 		"",
	// 	],

	// 	"description": "Creates a new Roact story",
	// 	"prefix": ["roactstory", "story"],
	// },

	"Basic Class": {
		"body": [
			"local ${1:ClassName} = {}",
			"$1.ClassName = \"$1\"",
			"$1.__index = $1",
			"",
			"function $1:__tostring()",
			"\treturn \"$1\"",
			"end",
			"",
			"function $1.new()",
			"\treturn setmetatable({}, $1)",
			"end",
			"",
			"export type $1 = typeof($1.new())",
			"return $1",
			"",
		],

		"description": "Creates a new basic class.",
		"prefix": ["basicclass", "class"],
	},
}